'''
This file converts the data from pgn to a more easily accesible json file.
It also adds the state of the board after each movement.
'''
from collections import defaultdict
# import variables defined from the whole package.
from dev2.step1 import INPUT_DATA
from dev2.step1 import OUTPUT_FOLDER


__author__ = "codingMonkey"
__project__ = "ChessML"


NAMES = "OUT"
FOLDS = 1000

def main():
    '''
    Main function to split the pgn generated by ScivsMac into 1000 pieces(defined by folds).
    It will write the files in a desired output path, the pgn files that were divided into separate parts.
    :return: nothing
    '''
    dump = defaultdict(lambda : list)

    with open(INPUT_DATA) as f:
        data = f.read().splitlines()
        # print data
    pivot =  len(data)/FOLDS
    pivList  = []
    textList = []
    threadList = []
    prev=0
    for i in range(1,FOLDS):
        p = i*pivot
        p=goToPGN_Start(data,p)+1
        pivList.append(p)
        textList.append('\n'.join(data[prev:p]))
        prev=p
    textList.append('\n'.join(data[p:]))

    for i in range(0,len(textList)):
        name = OUTPUT_FOLDER + NAMES +"_"+str(i)+".pgn"
        # th =  Tclass(i+1,name,i+1, textList[i])
        # th.start()
        # th.join()
        writePGN(textList[i],name)
        # threadList.append(th)

def writePGN(data, name):
    '''
    wrtites the file
    :param data:
    :param name:
    :return:
    '''
    fout = open(name, 'w')
    fout.write(data)
    fout.close()


def goToPGN_Start(data, i):
    '''
    :param data:
    :param i:
    :return:
    '''

    # print data[i]
    if(len(data[i])<1):
        if not (data[i-1].startswith("[")):
            return i
    return goToPGN_Start(data, i-1)

if __name__ == '__main__':
    main()


'''
Useless code

class Tclass (Thread):
    def __init__(self, threadID, name, counter, data):
        Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.counter = counter
        self.data = data

    def write_json(self):
        fout = open(self.name, 'w') # Or where you want it
        count = 1
        pgn = StringIO(self.data)# pgn file wont read string only stringIO
        node = chess.pgn.read_game(pgn)
        while node != None:
            info = node.headers
            info["fen"] = []
            while node.variations:
                next_node = node.variation(0)
                info["fen"].append(node.board().fen())
                node = next_node
            info["fen"].append(node.board().fen())
            node = chess.pgn.read_game(pgn)
            json.dump(info, fout, encoding='utf-8')
            fout.write('\n')
            count += 1
            if(count % 10000 == 0):
                print(count)
                # json.dump(dump, fout, encoding='utf-8')

        # json.dump(dump, fout, encoding='utf-8')
        fout.close()

    def run(self):
        # print "Starting " + self.name
        # print_time(self.name, self.counter, 5)
        self.write_json()
        print "Exiting " + self.name

'''